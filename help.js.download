// Context Help Reader 0.003

// (c) 2016-2017 by IS4U, s.r.o.
// Maintained by milan.sorm@is4u.cz

(function ( $ ) {
    // Main component associated with link
    $.uisShowHelp = function ( givenElement, options ) {
        // PRIVATE ATTRIBUTES

        var mode = {
            SHOW_PAGE: 1,
            SHOW_TAGS: 2
        };

        // Main configuration for plugin
        var defaults = {
            endpoint:          '/uis-reloaded.pl',
            dataAttributePage: 'contextHelpPage',   // \d+
            dataAttributeTags: 'contextHelpTags',   // split /,/ and trim
            currentContext:    null,
            freshOpen:         true,
            language:          'DETECT',            // lang from html header
            windowName:        'uis-context-help',
            autoOpenId:        'uis-context-help-autoopen',
            historyId:         'uis-context-help-history',
            frozenTopicId:     'uis-context-help-frozen',
            minimizeId:        'uis-context-help-minimize'
        };

        var plugin  = this;
        var element = givenElement;

        var displayMode;
        var displayWhat;

        // PUBLIC ATTRIBUTES

        plugin.settings = {};

        // PUBLIC METHODS

        // Constructor
        plugin.init = function () {
            plugin.settings = $.extend( {}, defaults, options );

            const non_auth = $( '.uis_reloaded_non_auth' ).length;
            var urlRegex = new RegExp( '^https?://([^/])+/auth' );
            if ( !non_auth && urlRegex.test( location.href ) )
                plugin.settings.endpoint = '/auth' + plugin.settings.endpoint;
            
            var $element = $( element );
            var page     = $element.data( plugin.settings.dataAttributePage );
            var tags     = $element.data( plugin.settings.dataAttributeTags );

            if ( !page && !tags )               // nothing associated with link
                return;

            if ( page ) {                       // precedence of page before tags
                displayMode = mode.SHOW_PAGE;
                displayWhat = parseInt( page );
                if ( isNaN( displayWhat ) || !displayWhat )   // invalid page
                    return;
            }
            else {
                // decode individual tags
                displayMode = mode.SHOW_TAGS;
                displayWhat = tags.toString().split( ',' ).map( function ( tag ) {
                    return tag.trim();
                } );

                if ( displayWhat && !displayWhat.length )      // nothing to display
                    return;
            }

            if ( plugin.settings.language == 'DETECT' ) {
                var language = window.navigator.userLanguage || window.navigator.language;
                if ( language != 'cs' && language != 'sk' && language != 'en' )
                    language = 'cs';

                plugin.settings.language = language;
            }

            // Attach to current existing
            $element.on( 'click', function ( event ) {
                event.preventDefault();
                plugin.openReader( displayMode, displayWhat, plugin.settings.freshOpen );
            } );

            if ( sessionStorage ) {
                var autoOpen = sessionStorage.getItem( plugin.settings.autoOpenId );
                if ( autoOpen && autoOpen == '1' && $( '#uis-context-help-reader' ).length === 0 ) {
                    var frozen = sessionStorage.getItem( plugin.settings.frozenTopicId );
                    var freshOpen = plugin.settings.freshOpen;
                    var ignoreHistory = false;

                    if ( frozen && frozen == '1' ) {
                        var history = sessionStorage.getItem( plugin.settings.historyId );
                        if ( history ) {
                            history = JSON.parse( history );
                            if ( history && history.constructor === Array && history.length > 0 ) {
                                var current = history[ history.length - 1 ];
                                if ( current ) {
                                    displayMode = current.what;
                                    displayWhat = current.selector;
                                    freshOpen = false;
                                    ignoreHistory = true;
                                }
                            }
                        }
                    }

                    plugin.openReader( displayMode, displayWhat, freshOpen, ignoreHistory );
                }
            }
        };

        plugin.getHelpPage = function ( page ) {
            var reader = $.Deferred();

            $.ajax(
                {
                    url:         plugin.settings.endpoint,
                    method:      'POST',
                    dataType:    'json',
                    contentType: 'application/json',
                    data:        JSON.stringify( [
                        {
                            action:   'getHelpPage',
                            idPage:   page,
                            language: plugin.settings.language
                        },
                        {
                            action:   'getRelatedHelpPages',
                            idPage:   page,
                            language: plugin.settings.language
                        }
                    ] )
                }
            ).done( function ( response ) {
                if ( response.constructor !== Array ) {
                    console.log( 'Not an array in response.' );
                    if ( response.errors )
                        console.log( response.errors.length == 1 ? response.errors[ 0 ] : response.errors );
                    return;
                }
                var isSuccess = true;
                $.each( response, function ( index, value ) {
                    if ( !value.isSuccess ) {
                        if ( value.errors )
                            console.log( value.errors.length == 1 ? value.errors[ 0 ] : value.errors );

                        isSuccess = false;
                    }
                } );
                if ( !isSuccess )
                    return;

                var doc = '';
                var output = '';
                $.each( response, function ( index, value ) {
                    if ( value.action == 'getHelpPage' && value.pageContent ) {
                        var content = value.pageContent;
                        doc = content.replace( /^<\?xml version="1\.0"\?>\n/, '' );
                    }
                    else if ( value.action == 'getRelatedHelpPages' && value.helpPages && value.helpPages.length > 0 ) {
                        var topics = $( '<ul>' );
                        $.each( value.helpPages, function ( i, v ) {
                            topics.append( '<li><a href="/help.pl?page=' + v.idPage + '" data-idpage="' + v.idPage + '">' + v.title + '</a></li>' );
                        } );

                        var related = $( '<div>' ).append( '<h2>Související témata</h2>' ).append( topics );

                        output += related[ 0 ].outerHTML;
                    }
                } );

                if ( output ) {
                    if ( ! doc )
                        doc = '<div class="documentation></div>';

                    doc = $( doc );
                    var docdiv = doc.filter( 'div.documentation' );
                    if ( !docdiv.length ) {
                        doc = $( '<div class="documentation">' + doc + '</div>' );
                        docdiv = doc.filter( 'div.documentation' );
                    }

                    docdiv.append( output );
                    doc = doc[ 0 ].outerHTML;
                }

                reader.resolve( { html: doc } );
            } );

            return reader.promise();
        };

        plugin.getTagsPage = function ( tags ) {
            var reader = $.Deferred();

            var actions = tags.map( function ( value ) {
                return $.isNumeric( value ) ? {
                    action:   'getHelpPagesForApp',
                    idApp:    value,
                    language: plugin.settings.language
                } : {
                    action:   'getHelpPagesForTag',
                    tag:      value,
                    language: plugin.settings.language
                };
            } );

            $.ajax(
                {
                    url:         plugin.settings.endpoint,
                    method:      'POST',
                    dataType:    'json',
                    contentType: 'application/json',
                    data:        JSON.stringify( actions )
                }
            ).done( function ( response ) {
                if ( response.constructor !== Array )
                    response = [ response ];

                var isSuccess = true;
                $.each( response, function ( index, value ) {
                    if ( !value.isSuccess ) {
                        if ( value.errors )
                            console.log( value.errors.length == 1 ? value.errors[ 0 ] : value.errors );

                        isSuccess = false;
                    }
                } );
                if ( !isSuccess )
                    return;

                var output = '';

                $.each( response, function ( index, value ) {
                    if ( ( value.action == 'getHelpPagesForTag' || value.action == 'getHelpPagesForApp' ) && value.helpPages && value.helpPages.length > 0 ) {
                        var topics = $( '<ul>' );
                        $.each( value.helpPages, function ( i, v ) {
                            topics.append( '<li><a href="/help.pl?page=' + v.idPage + '" data-idpage="' + v.idPage + '">' + v.title + '</a></li>' );
                        } );

                        var related = $( '<div>' ).append( '<h2>Více možných témat</h2>' ).append( topics );

                        output += '<div>' + related.html() + '</div>';
                    }
                } );

                reader.resolve( { html: '<div class="documentation">' + output + '</div>' } );
            } );

            return reader.promise();
        };

        plugin.loadPosition = function () {
            var windowDimension = null;
            if ( sessionStorage ) {
                windowDimension = sessionStorage.getItem( plugin.settings.windowName );
                if ( windowDimension )
                    windowDimension = JSON.parse( windowDimension );

                if ( windowDimension && ( ! windowDimension.hasOwnProperty( 'left' ) || ! windowDimension.hasOwnProperty( 'top' ) || ! windowDimension.hasOwnProperty( 'height' ) || ! windowDimension.hasOwnProperty( 'width' ) ) )
                    windowDimension = null;
            }

            if ( !windowDimension )
                windowDimension = { left: -1, top: -1, height: 0, width: 0 };

            if ( windowDimension.left < 0 || windowDimension.left > $( window ).width() - 60 )
                windowDimension.left = 2 * $( window ).width() / 3;

            if ( windowDimension.top < 0 || windowDimension.top > $( window ).height() - 60 )
                windowDimension.top = 40;

            if ( windowDimension.width < 300 || windowDimension.width > $( window ).width() )
                windowDimension.width = $( window ).width() - windowDimension.left - 40;

            if ( windowDimension.height < 200 || windowDimension.height > $( window ).height() )
                windowDimension.height = $( window ).height() - 80;

            return windowDimension;
        };

        plugin.showContent = function ( content ) {
            var reader = $( '#uis-context-help-reader' );
            if ( reader.length )
                reader.remove();

            $( 'body' ).append( '<div id="uis-context-help-reader"></div>' );
            reader = $( '#uis-context-help-reader' );

            reader
                .html( '<div id="uis-context-help-titlebar">'
                      + '<div id="uis-context-help-title">Nápověda</div>'
                      + '<div id="uis-context-help-backbtn" title="Zpět na předchozí téma"></div>'
                      + '<div id="uis-context-help-freezebtn" title="Nápověda je nyní kontextová, chci zafixovat zobrazené téma"></div>'
                      + '<div id="uis-context-help-minimizebtn" title="Minimalizovat okno"></div>'
                      + '<div id="uis-context-help-enlargebtn" title="Zobrazit v samostatné aplikaci"></div>'
                      + '<div id="uis-context-help-resetbtn" title="Vrátit okno do původní pozice"></div>'
                      + '<div id="uis-context-help-closebtn" title="Zavřít nápovědu"></div>'
                      + '</div>' + content.html + '<div id="uis-context-help-footerbar"></div>' )
                .css( plugin.loadPosition() );

            if ( sessionStorage ) {
                sessionStorage.setItem( plugin.settings.autoOpenId, 1 );

                var history = sessionStorage.getItem( plugin.settings.historyId );

                if ( history ) {
                    history = JSON.parse( history );
                    if ( history && history.constructor === Array && history.length >= 2 ) {
                        reader.on( 'click', '#uis-context-help-backbtn', function ( event ) {
                            event.preventDefault();

                            var history = sessionStorage.getItem( plugin.settings.historyId );
                            if ( history ) {
                                history = JSON.parse( history );
                                if ( history && history.constructor === Array && history.length > 0 ) {
                                    history.pop();
                                    var current = history[ history.length - 1 ];

                                    sessionStorage.setItem( plugin.settings.historyId, JSON.stringify( history ) );

                                    // Open reader for stored mode and selector, but not freshopen (first false) and ignore all history operations (second true)
                                    if ( current )
                                        plugin.openReader( current.what, current.selector, false, true );
                                }
                            }
                        } );
                    }
                    else {
                        $( '#uis-context-help-backbtn' ).remove();
                    }
                }
            }

            $( '#uis-context-help-reader a:not(#back-in-help-history)' ).uisShowHelp( {
                dataAttributePage: 'idpage',
                dataAttributeTags: 'tags',
                freshOpen:         false,
                language:          plugin.settings.language
            } );

            if ( sessionStorage ) {
                var frozen = sessionStorage.getItem( plugin.settings.frozenTopicId );
                if ( frozen && frozen == '1' ) {
                    $( '#uis-context-help-freezebtn' )
                        .attr( 'title', 'Nápověda je zafixovaná, chci začít kontextově sledovat zobrazené téma' )
                        .addClass( 'uis-context-help-frozen' );
                }

                var minimize = sessionStorage.getItem( plugin.settings.minimizeId );
                if ( minimize && minimize == '1' ) {
                    reader.addClass( 'uis-context-help-minimized' );
                }
            }

            reader.on( 'click', '#uis-context-help-freezebtn', function (e) {
                if ( sessionStorage ) {
                    var frozen = sessionStorage.getItem( plugin.settings.frozenTopicId );
                    if ( frozen && frozen == '1' ) {
                        sessionStorage.removeItem( plugin.settings.frozenTopicId );
                        $( '#uis-context-help-freezebtn' )
                            .attr( 'title', 'Nápověda je nyní kontextová, chci zafixovat zobrazené téma' )
                            .removeClass( 'uis-context-help-frozen' );
                    }
                    else {
                        sessionStorage.setItem( plugin.settings.frozenTopicId, 1 );
                        $( '#uis-context-help-freezebtn' )
                            .attr( 'title', 'Nápověda je zafixovaná, chci začít kontextově sledovat zobrazené téma' )
                            .addClass( 'uis-context-help-frozen' );
                    }
                }
            } );

            reader.on( 'click', '#uis-context-help-minimizebtn', function (e) {
                if ( sessionStorage ) {
                    var minimize = sessionStorage.getItem( plugin.settings.minimizeId );
                    if ( minimize && minimize == '1' ) {
                        sessionStorage.removeItem( plugin.settings.minimizeId );
                        reader.removeClass( 'uis-context-help-minimized' );
                    }
                    else {
                        sessionStorage.setItem( plugin.settings.minimizeId, 1 );
                        reader.addClass( 'uis-context-help-minimized' );
                    }
                }
            } );

            reader.on( 'click', '#uis-context-help-closebtn', function (e) {
                if ( sessionStorage )
                    sessionStorage.removeItem( plugin.settings.autoOpenId );

                reader.remove();
            } );

            reader.on( 'click', '#uis-context-help-resetbtn', function (e) {
                if ( sessionStorage ) {
                    sessionStorage.removeItem( plugin.settings.windowName );
                    sessionStorage.removeItem( plugin.settings.minimizeId );
                    reader.removeClass( 'uis-context-help-minimized' );
                }

                reader.css( plugin.loadPosition() );
            } );

            reader.on( 'click', '#uis-context-help-enlargebtn', function (e) {
                if ( sessionStorage )
                    sessionStorage.removeItem( plugin.settings.autoOpenId );

                window.open( $( '.context-help-invoke:eq(0)' ).prop( 'href' ), '_blank' );
            } );

            reader.resizable( {
                containment: "document",
                handles:     "all",
                minHeight:   200,
                minWidth:    300,
                start:       function ( event ) { reader.css( 'position', 'fixed' ); },
                stop:        function ( event, ui ) {
                    reader.css( 'position', 'fixed' );

                    var newDimension = { left: reader.position().left, top: reader.position().top, width: reader.width(), height: reader.height() };

                    if ( sessionStorage )
                        sessionStorage.setItem( plugin.settings.windowName, JSON.stringify( newDimension ) );
                }
            } );

            reader.draggable( {
                scroll:      true,
                handle:      "#uis-context-help-titlebar",
                stop:        function ( event, ui ) {
                    var newDimension = { left: reader.position().left, top: reader.position().top, width: reader.width(), height: reader.height() };

                    if ( sessionStorage )
                        sessionStorage.setItem( plugin.settings.windowName, JSON.stringify( newDimension ) );
                }
            } );
        };

        // Action hook for opening content in reader
        plugin.openReader = function ( what, selector, freshOpen, ignoreHistoryOperation ) {
            if ( !ignoreHistoryOperation && sessionStorage ) {
                if ( freshOpen )
                    sessionStorage.removeItem( plugin.settings.historyId );

                var historySerialized = sessionStorage.getItem( plugin.settings.historyId );
                var history = historySerialized ? JSON.parse( historySerialized ) : [];

                if ( history.constructor !== Array )
                    history = [];

                history.push( { what: what, selector: selector } );

                sessionStorage.setItem( plugin.settings.historyId, JSON.stringify( history ) );
            }

            if ( what == mode.SHOW_PAGE )
                plugin.getHelpPage( selector )
                      .done( plugin.showContent );
            else
                plugin.getTagsPage( selector )
                      .done( plugin.showContent );
        };

        // Call constructor
        plugin.init();      // Attach all events
    };

    // Extend jQuery with new component plugin
    $.fn.uisShowHelp = function ( options ) {
        return this.each( function () {
            if ( undefined === $( this ).data( 'uisShowHelp' ) ) {
                var plugin = new $.uisShowHelp( this, options );
                $( this ).data( 'uisShowHelp', plugin );
            }
        } );
    };

    // Singleton and decorator bind with document (or some area) which decorate newly added links with our component
    $.uisHelpDecorator = function ( givenElement, options ) {
        var defaults = {};

        var plugin  = this;
        var element = givenElement;

        // PUBLIC ATTRIBUTES

        plugin.settings = {
            selector:          '.help',
            dataAttributePage: 'helppage',
            dataAttributeTags: 'helptags',
            language:          'DETECT'
        };

        // Constructor
        plugin.bindHelp = function () {
            $( plugin.settings.selector ).uisShowHelp( {
                dataAttributePage: plugin.settings.dataAttributePage,
                dataAttributeTags: plugin.settings.dataAttributeTags,
                language:          plugin.settings.language
            } );
        };

        plugin.init = function () {
            plugin.settings = $.extend( {}, defaults, options );

            plugin.bindHelp();

            $( document ).ajaxComplete( function ( event, request, settings ) {
                // Q - is it already called at last??? needs to be tested
                plugin.bindHelp();
            } );
        };

        // Call constructor
        plugin.init();      // Attach all events
    };

    // Extend jQuery with new decorator plugin
    $.fn.uisHelpDecorator = function ( options ) {
        return this.each( function () {
            if ( undefined === $( this ).data( 'uisHelpDecorator' ) ) {
                var plugin = new $.uisHelpDecorator( this, options );
                $( this ).data( 'uisHelpDecorator', plugin );
            }
        } );
    };


})( jQuery );

// Attach reader to all elements with class 'context-help-invoke'
jQuery( document ).ready( function ( $ ) {
    $( 'html' ).uisHelpDecorator( {
        selector:          '.context-help-invoke',
        dataAttributePage: 'contexthelppage',
        dataAttributeTags: 'contexthelptags',
        language:          'cs'
    } );
} );
